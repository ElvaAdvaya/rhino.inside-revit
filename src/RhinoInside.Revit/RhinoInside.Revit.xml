<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RhinoInside.Revit</name>
    </assembly>
    <members>
        <member name="T:RhinoInside.Revit.Convert.ConversionException">
            <summary>
            The exception that is thrown when a geometry conversion error occurs.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Display.DisplayMaterialConverter">
            <summary>
            Represents a converter for converting <see cref="T:Rhino.Display.DisplayMaterial"/> values
            back and forth Revit and Rhino.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Display.PreviewConverter.GetPreviewMaterials(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.GeometryObject},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Material)">
            <summary>
            Extracts a sequence of <see cref="T:Autodesk.Revit.DB.Material"/> from a sequence of <see cref="T:Autodesk.Revit.DB.GeometryObject"/>.
            </summary>
            <remarks>
            Empty <see cref="T:Autodesk.Revit.DB.Mesh"/> and empty <see cref="T:Autodesk.Revit.DB.Solid"/> will be skipped,
            so output <see cref="!:IEnumerable&lt;ARDB.Material&gt;"/> may be shorter than the input.
            Output is warranted to be free of nulls.
            </remarks>
            <param name="geometries"></param>
            <param name="doc"></param>
            <param name="currentMaterial"></param>
            <returns>An <see cref="!:IEnumerable&lt;ARDB.Material&gt;"/></returns>
            <seealso cref="M:RhinoInside.Revit.Convert.Display.PreviewConverter.GetPreviewMeshes(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.GeometryObject},Autodesk.Revit.DB.Document,Rhino.Geometry.MeshingParameters)"/>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Display.PreviewConverter.GetPreviewMeshes(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.GeometryObject},Autodesk.Revit.DB.Document,Rhino.Geometry.MeshingParameters)">
            <summary>
            Extracts a sequence of <see cref="T:Rhino.Geometry.Mesh"/> from a sequence of <see cref="T:Autodesk.Revit.DB.GeometryObject"/>.
            </summary>
            <remarks>
            Empty <see cref="T:Autodesk.Revit.DB.Mesh"/> and empty <see cref="T:Autodesk.Revit.DB.Solid"/> will be skipped,
            so output <see cref="!:IEnumerable&lt;Rhino.Geometry.Mesh&gt;"/> may be shorter than the input.
            Output is warranted to be free of nulls, an empty <see cref="T:Rhino.Geometry.Mesh"/> is returned in case of error.
            </remarks>
            <param name="geometries"></param>
            <param name="doc"></param>
            <param name="meshingParameters"></param>
            <returns>An <see cref="!:IEnumerable&lt;Rhino.Geometry.Mesh&gt;"/></returns>
            <seealso cref="M:RhinoInside.Revit.Convert.Display.PreviewConverter.GetPreviewMaterials(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.GeometryObject},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Material)"/>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Display.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in <see cref="N:Rhino.Display"/> namespace.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.DocObjects.ViewportInfoConverter">
            <summary>
            Represents a converter for converting <see cref="T:Rhino.DocObjects.ViewportInfo"/> values
            back and forth Revit and Rhino.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.ExtrusionEncoder">
            <summary>
            Converts <see cref="T:Rhino.Geometry.Extrusion"/> to be transfered to a <see cref="T:Autodesk.Revit.DB.Solid"/>.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.GeometryDecoder">
            <summary>
            Converts a Revit geometry type to an equivalent Rhino geometry type.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ModelScaleFactor">
            <summary>
            Default scale factor applied during the geometry decoding to change
            from Revit internal units to active Rhino document model units.
            </summary>
            <remarks>
            This factor should be applied to Revit internal length values
            in order to obtain Rhino model length values.
            <code>
            RhinoModelLength = RevitInternalLength * <see cref="P:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ModelScaleFactor"/>
            </code>
            </remarks>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToModelLength(System.Double)">
            <summary>
            Converts the specified length to an equivalent Rhino model length.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Rhino model length that is equivalent to the provided value.</returns>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint2d(Autodesk.Revit.DB.UV)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.UV" /> to an equivalent <see cref="T:Rhino.Geometry.Point2d" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint2d(Autodesk.Revit.DB.UV)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Point2d rhinoPoint2d = revitUvPoint.ToPoint2d();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_point2d = revit_uvpoint.ToPoint2d() # type: RG.Point2d
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint2d(Autodesk.Revit.DB.UV)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Point2d rhinoPoint2d = GeometryEncoder.ToPoint2d(revitUvPoint)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_point2d = GD.ToPoint2d(revit_uvpoint) # type: RG.Point2d
             </code>
            
             </example>
             <param name="uvPoint">Revit uvPoint to convert.</param>
             <returns>Rhino point that is equivalent to the provided Revit uvPoint.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToVector2d(Autodesk.Revit.DB.UV)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.UV" /> to an equivalent <see cref="T:Rhino.Geometry.Vector2d" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToVector2d(Autodesk.Revit.DB.UV)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Vector2d rhinoVector2d = revitUvVector.ToVector2d();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_vector2d = revit_uvvector.ToVector2d() # type: RG.Vector2d
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToVector2d(Autodesk.Revit.DB.UV)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Vector2d rhinoVector2d = GeometryEncoder.ToVector2d(revitUvVector)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_vector2d = GD.ToVector2d(revit_uvvector) # type: RG.Vector2d
             </code>
            
             </example>
             <param name="uvVector">Revit uvVector to convert.</param>
             <returns>Rhino vector that is equivalent to the provided Revit uvPoint.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint3d(Autodesk.Revit.DB.XYZ)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.XYZ" /> to an equivalent <see cref="T:Rhino.Geometry.Point3d" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint3d(Autodesk.Revit.DB.XYZ)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Point3d rhinoPoint3d = revitPoint.ToPoint3d();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_point3d = revit_point.ToPoint3d() # type: RG.Point3d
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint3d(Autodesk.Revit.DB.XYZ)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Point3d rhinoPoint3d = GeometryEncoder.ToPoint3d(revitPoint)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_point3d = GD.ToPoint3d(revit_point) # type: RG.Point3d
             </code>
            
             </example>
             <param name="point">Revit point to convert.</param>
             <returns>Rhino point that is equivalent to the provided Revit point.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToVector3d(Autodesk.Revit.DB.XYZ)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.XYZ" /> to an equivalent <see cref="T:Rhino.Geometry.Vector3d" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToVector3d(Autodesk.Revit.DB.XYZ)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Vector3d rhinoVector3d = revitPoint.ToVector3d();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_vector3d = revit_vector.ToVector3d() # type: RG.Vector3d
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToVector3d(Autodesk.Revit.DB.XYZ)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Vector3d rhinoVector3d = GeometryEncoder.ToVector3d(revitVector)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_vector3d = GD.ToVector3d(revit_vector) # type: RG.Vector3d
             </code>
            
             </example>
             <param name="vector">Revit vector to convert.</param>
             <returns>Rhino vector that is equivalent to the provided Revit point.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPlane(Autodesk.Revit.DB.Plane)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Plane" /> to an equivalent <see cref="T:Rhino.Geometry.Plane" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPlane(Autodesk.Revit.DB.Plane)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Plane rhinoPlane = revitPlane.ToPlane();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_plane = revit_plane.ToPlane() # type: RG.Plane
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPlane(Autodesk.Revit.DB.Plane)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Plane rhinoPlane = GeometryEncoder.ToPlane(revitPlane)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_plane = GD.ToPlane(revit_plane) # type: RG.Plane
             </code>
            
             </example>
             <param name="plane">Revit point to convert.</param>
             <returns>Rhino plane that is equivalent to the provided Revit plane.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToTransform(Autodesk.Revit.DB.Transform)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Transform" /> to an equivalent <see cref="T:Rhino.Geometry.Transform" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToTransform(Autodesk.Revit.DB.Transform)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Transform rhinoTransform = revitTransform.ToTransform();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_transform = revit_transform.ToTransform() # type: RG.Transform
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToTransform(Autodesk.Revit.DB.Transform)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Transform rhinoTransform = GeometryEncoder.ToTransform(revitTransform)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_transform = GD.ToTransform(revit_transform) # type: RG.Transform
             </code>
            
             </example>
             <param name="transform">Revit transform to convert.</param>
             <returns>Rhino transform that is equivalent to the provided Revit transform.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ" /> to an equivalent <see cref="T:Rhino.Geometry.BoundingBox" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             BoundingBox rhinoBBox = revitBBox.ToBoundingBox();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_bbox = revit_bbox.ToBoundingBox() # type: RG.BoundingBox
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             BoundingBox rhinoBBox = GeometryEncoder.ToBoundingBox(revitBBox)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_bbox = GD.ToBoundingBox(revit_bbox) # type: RG.BoundingBox
             </code>
            
             </example>
             <param name="boundingBox">Revit boundingBox to convert.</param>
             <returns>Rhino boundingBox that is equivalent to the provided Revit boundingBox.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ,Rhino.Geometry.Transform@)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ" /> to an equivalent <see cref="T:Rhino.Geometry.BoundingBox" /> and outputs the conversion transform.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             BoundingBox rhinoBBox = revitBBox.ToBoundingBox(out Transform transform);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_bbox, transform = revit_bbox.ToBoundingBox() # type: (BoundingBox, RG.Transform)
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             BoundingBox rhinoBBox = GeometryEncoder.ToBoundingBox(revitBBox, out Transform transform)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_bbox, transform = GD.ToBoundingBox(revit_bbox) # type: (BoundingBox, RG.Transform)
             </code>
            
             </example>
             <param name="boundingBox">Revit boundingBox to convert.</param>
             <param name="transform">Conversion transform as output.</param>
             <returns>Rhino boundingBox that is equivalent to the provided Revit boundingBox.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.Outline)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Outline" /> to an equivalent <see cref="T:Rhino.Geometry.BoundingBox" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.Outline)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             BoundingBox rhinoBBox = revitOutline.ToBoundingBox();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_bbox = revit_outline.ToBoundingBox() # type: RG.BoundingBox
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBoundingBox(Autodesk.Revit.DB.Outline)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             BoundingBox rhinoBBox = GeometryEncoder.ToBoundingBox(revitOutline)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_bbox = GD.ToBoundingBox(revit_outline) # type: RG.BoundingBox
             </code>
            
             </example>
             <param name="outline">Revit outline to convert.</param>
             <returns>Rhino boundingBox that is equivalent to the provided Revit outline.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBox(Autodesk.Revit.DB.BoundingBoxXYZ)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ" /> to an equivalent <see cref="T:Rhino.Geometry.Box" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBox(Autodesk.Revit.DB.BoundingBoxXYZ)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Box rhinoBox = revitBBox.ToBox();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_box = revit_bbox.ToBox() # type: RG.Box
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBox(Autodesk.Revit.DB.BoundingBoxXYZ)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Box rhinoBox = GeometryEncoder.ToBox(revitBBox)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_box = GD.ToBox(revit_bbox) # type: RG.Box
             </code>
            
             </example>
             <param name="boundingBox">Revit boundingBox to convert.</param>
             <returns>Rhino box that is equivalent to the provided Revit boundingBox.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint(Autodesk.Revit.DB.Point)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Point" /> to an equivalent <see cref="T:Rhino.Geometry.Point" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint(Autodesk.Revit.DB.Point)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Point rhinoPoint = revitPoint.ToPoint();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_point = revit_point.ToPoint() # type: RG.Point
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPoint(Autodesk.Revit.DB.Point)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Point rhinoPoint = GeometryEncoder.ToPoint(revitPoint)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_point = GD.ToPoint(revit_point) # type: RG.Point
             </code>
            
             </example>
             <param name="point">Revit point to convert.</param>
             <returns>Rhino point that is equivalent to the provided Revit point.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Line)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Line" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Line)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitLine.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_line.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Line)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitLine)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_line) # type: RG.Curve
             </code>
            
             </example>
             <param name="line">Revit line to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit line.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Arc)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Arc" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Arc)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitArc.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_arc.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Arc)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitArc)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_arc) # type: RG.Curve
             </code>
            
             </example>
             <param name="arc">Revit arc to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit arc.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Ellipse)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Ellipse" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Ellipse)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitEllipse.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_ellipse.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Ellipse)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitEllipse)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_ellipse) # type: RG.Curve
             </code>
            
             </example>
             <param name="ellipse">Revit ellipse to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit ellipse.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.NurbSpline)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.NurbSpline" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.NurbSpline)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitNurbSpline.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_nurbsspline.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.NurbSpline)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitNurbSpline)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_nurbsspline) # type: RG.Curve
             </code>
            
             </example>
             <param name="nurbSpline">Revit helix to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit hermiteSpline.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.HermiteSpline)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.HermiteSpline" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.HermiteSpline)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitHermiteSpline.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_hermitespline.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.HermiteSpline)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitHermiteSpline)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_hermitespline) # type: RG.Curve
             </code>
            
             </example>
             <param name="hermiteSpline">Revit helix to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit hermiteSpline.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.CylindricalHelix)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.CylindricalHelix" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.CylindricalHelix)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitHelix.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_helix.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.CylindricalHelix)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitHelix)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_helix) # type: RG.Curve
             </code>
            
             </example>
             <param name="helix">Revit helix to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit helix.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Curve)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Curve" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Curve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_curve.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.Curve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitCurve)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_curve) # type: RG.Curve
             </code>
            
             </example>
             <param name="curve">Revit curve to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit curve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPolylineCurve(Autodesk.Revit.DB.PolyLine)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.PolyLine" /> to an equivalent <see cref="T:Rhino.Geometry.PolylineCurve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPolylineCurve(Autodesk.Revit.DB.PolyLine)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             PolylineCurve rhinoPolylineCurve = revitPolyLine.ToPolylineCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_polylinecurve = revit_polyline.ToPolylineCurve() # type: RG.PolylineCurve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPolylineCurve(Autodesk.Revit.DB.PolyLine)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             PolylineCurve rhinoPolylineCurve = GeometryEncoder.ToPolylineCurve(revitPolyLine)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_polylinecurve = GD.ToPolylineCurve(revit_polyline) # type: RG.PolylineCurve
             </code>
            
             </example>
             <param name="polyLine">Revit polyLine to convert.</param>
             <returns>Rhino polyLineCurve that is equivalent to the provided Revit polyLine.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBrep(Autodesk.Revit.DB.Face)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Face" /> to an equivalent <see cref="T:Rhino.Geometry.Brep" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBrep(Autodesk.Revit.DB.Face)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Brep rhinoBrep = revitFace.ToBrep();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_brep = revit_face.ToBrep() # type: RG.Brep
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBrep(Autodesk.Revit.DB.Face)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Brep rhinoBrep = GeometryEncoder.ToBrep(revitFace)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_brep = GD.ToBrep(revit_face) # type: RG.Brep
             </code>
            
             </example>
             <param name="face">Revit face to convert.</param>
             <returns>Rhino brep that is equivalent to the provided Revit face.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBrep(Autodesk.Revit.DB.Solid)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Solid" /> to an equivalent <see cref="T:Rhino.Geometry.Brep" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBrep(Autodesk.Revit.DB.Solid)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Brep rhinoBrep = revitSolid.ToBrep();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_brep = revit_solid.ToBrep() # type: RG.Brep
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToBrep(Autodesk.Revit.DB.Solid)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Brep rhinoBrep = GeometryEncoder.ToBrep(revitSolid)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_brep = GD.ToBrep(revit_solid) # type: RG.Brep
             </code>
            
             </example>
             <param name="solid">Revit solid to convert.</param>
             <returns>Rhino brep that is equivalent to the provided Revit solid.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToMesh(Autodesk.Revit.DB.Mesh)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Mesh" /> to an equivalent <see cref="T:Rhino.Geometry.Mesh" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToMesh(Autodesk.Revit.DB.Mesh)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Mesh rhinoMesh = revitMesh.ToMesh();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_mesh = revit_mesh.ToMesh() # type: RG.Mesh
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToMesh(Autodesk.Revit.DB.Mesh)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Mesh rhinoMesh = GeometryEncoder.ToMesh(revitMesh)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_mesh = GD.ToMesh(revit_mesh) # type: RG.Mesh
             </code>
            
             </example>
             <param name="mesh">Revit mesh to convert.</param>
             <returns>Rhino mesh that is equivalent to the provided Revit mesh.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToGeometryBase(Autodesk.Revit.DB.GeometryObject)">
            <summary>
            Converts the specified GeomertyObject to an equivalent Revit GeometryBase object.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Rhino GeometryBase object that is equivalent to the provided value.</returns>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.CurveLoop)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.CurveLoop" /> to an equivalent <see cref="T:Rhino.Geometry.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.CurveLoop)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = revitCurveLoop.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             rhino_curve = revit_curveloop.ToCurve() # type: RG.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurve(Autodesk.Revit.DB.CurveLoop)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             Curve rhinoCurve = GeometryEncoder.ToCurve(revitCurveLoop)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Rhino.Geometry as RG
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryDecoder as GD
             
             rhino_curve = GD.ToCurve(revit_curveloop) # type: RG.Curve
             </code>
            
             </example>
             <param name="curveLoop">Revit curveLoop to convert.</param>
             <returns>Rhino curve that is equivalent to the provided Revit curveLoop.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPolyCurve(Autodesk.Revit.DB.CurveLoop)">
            <summary>
            Converts the specified CurveLoop to an equivalent Rhino PolyCurve.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Rhino PolyCurve that is equivalent to the provided value.</returns>
            <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurveMany(Autodesk.Revit.DB.CurveArray)">
            <summary>
            Converts the specified CurveArrArray to a Rhino Curve IEnumerable.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Rhino Curve IEnumerable that is equivalent to the provided value.</returns>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurves(Autodesk.Revit.DB.CurveArray)">
            <summary>
            Converts the specified CurveArray to an array of C0 continuous Rhino Curves.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>An array of C0 continuous Rhino Curve that is equivalent to the provided value.</returns>
            <since>1.6</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToPolyCurve(Autodesk.Revit.DB.CurveArray)">
            <summary>
            Converts the specified CurveArray to an equivalent Rhino PolyCurve.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Rhino PolyCurve that is equivalent to the provided value.</returns>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.ToCurveMany(Autodesk.Revit.DB.CurveArrArray)">
            <summary>
            Converts the specified CurveArrArray to a Rhino Curve IEnumerable.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Rhino Curve IEnumerable that is equivalent to the provided value.</returns>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.UpdateGraphicAttributes(Autodesk.Revit.DB.GeometryObject)">
            <summary>
            Update Context from <see cref="T:Autodesk.Revit.DB.GeometryObject"/> <paramref name="geometryObject"/>
            </summary>
            <param name="geometryObject"></param>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryDecoder.SetGraphicAttributes(Rhino.Geometry.GeometryBase)">
            <summary>
            Set graphic attributes to <see cref="T:Rhino.Geometry.GeometryBase"/> <paramref name="geometry"/> from Context
            </summary>
            <param name="geometry"></param>
            <returns><paramref name="geometry"/> with graphic attributes</returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.GeometryEncoder">
            <summary>
            Converts a Rhino geometry type to an equivalent Revit geometry type.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ModelScaleFactor">
            <summary>
            Default scale factor applied during the geometry encoding to change
            from active Rhino document model units to Revit internal units.
            </summary>
            <remarks>
            This factor should be applied to Rhino model length values
            in order to obtain Revit internal length values.
            <code>
            RevitInternalLength = RhinoModelLength * <see cref="P:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ModelScaleFactor"/>
            </code>
            </remarks>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToInternalLength(System.Double)">
            <summary>
            Converts the specified length to an equivalent Revit internal length.
            </summary>
            <param name="value">A value to convert.</param>
            <returns>A Revit internal length that is equivalent to the provided value.</returns>
            <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Point2f)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Point2f" /> to an equivalent <see cref="T:Autodesk.Revit.DB.UV" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Point2f)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             DB.UV revitUVpoint = rhinoPoint2f.ToUV();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
             
             revit_uvpoint = rhino_point2f.ToUV()	# type: DB.UV
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Point2f)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
             
             DB.UV revitUVpoint = GeometryEncoder.ToUV(rhinoPoint2f);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
             
             revit_uvpoint = GE.ToUV(rhino_point2f)	# type: DB.UV
             </code>
            
             </example>
             <param name="point">Rhino point to convert.</param>
             <returns>Revit point that is equivalent to the provided Rhino point.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Point2d)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Point2d" /> to an equivalent <see cref="T:Autodesk.Revit.DB.UV" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Point2d)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.UV revitUVpoint = rhinoPoint2d.ToUV();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_uvpoint = rhino_point2d.ToUV()	# type: DB.UV
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Point2d)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.UV revitUVpoint = GeometryEncoder.ToUV(rhinoPoint2d);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_uvpoint = GE.ToUV(rhino_point2d)	# type: DB.UV
             </code>
            
             </example>
             <param name="point">Rhino point to convert.</param>
             <returns>Revit point that is equivalent to the provided Rhino point.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Vector2f)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Vector2f" /> to an equivalent <see cref="T:Autodesk.Revit.DB.UV" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Vector2f)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.UV revitUVpoint = rhinoVector2f.ToUV();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_uvvector = rhino_vector2f.ToUV()	# type: DB.UV
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Vector2f)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.UV revitUVVector = GeometryEncoder.ToUV(rhinoVector2f);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_uvvector = GE.ToUV(rhino_vector2f)	# type: DB.UV
             </code>
            
             </example>
             <param name="vector">Rhino vector to convert.</param>
             <returns>Revit vector that is equivalent to the provided Rhino vector.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Vector2d)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Vector2d" /> to an equivalent <see cref="T:Autodesk.Revit.DB.UV" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Vector2d)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.UV revitUVVector = rhinoVector2d.ToUV();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_uvpoint = rhino_vector2d.ToUV()	# type: DB.UV
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToUV(Rhino.Geometry.Vector2d)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.UV revitUVVector = GeometryEncoder.ToUV(rhinoVector2d);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_uvvector = GE.ToUV(rhino_vector2d)	# type: DB.UV
             </code>
            
             </example>
             <param name="vector">Rhino vector to convert.</param>
             <returns>Revit vector that is equivalent to the provided Rhino vector.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Point3f)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Point3f" /> to an equivalent <see cref="T:Autodesk.Revit.DB.XYZ" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Point3f)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = rhinoPoint3f.ToXYZ();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_xyzpoint = rhino_point3f.ToXYZ()	# type: DB.XYZ
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Point3f)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = GeometryEncoder.ToXYZ(rhinoPoint3f);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_xyzpoint = GE.ToXYZ(rhino_point3f)	# type: DB.XYZ
             </code>
            
             </example>
             <param name="point">Rhino point to convert.</param>
             <returns>Revit point that is equivalent to the provided Rhino point.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Point3d)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Point3d" /> to an equivalent <see cref="T:Autodesk.Revit.DB.XYZ" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Point3d)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = rhinoPoint3d.ToXYZ();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_xyzpoint = rhino_point3d.ToXYZ()	# type: DB.XYZ
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Point3d)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = GeometryEncoder.ToXYZ(rhinoPoint3d);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_xyzpoint = GE.ToXYZ(rhino_point3d)	# type: DB.XYZ
             </code>
            
             </example>
             <param name="point">Rhino point to convert.</param>
             <returns>Revit point that is equivalent to the provided Rhino point.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Vector3f)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Vector3f" /> to an equivalent <see cref="T:Autodesk.Revit.DB.XYZ" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Vector3f)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = rhinoVector3f.ToXYZ();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_xyzvector = rhino_vector3f.ToXYZ()	# type: DB.XYZ
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Vector3f)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZVector = GeometryEncoder.ToXYZ(rhinoVector3f);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_xyzpoint = GE.ToXYZ(rhino_vector3f)	# type: DB.XYZ
             </code>
            
             </example>
             <param name="vector">Rhino vector to convert.</param>
             <returns>Revit vector that is equivalent to the provided Rhino vector.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Vector3d)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Vector3d" /> to an equivalent <see cref="T:Autodesk.Revit.DB.XYZ" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Vector3d)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = rhinoVector3d.ToXYZ();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_xyzpoint = rhino_vector3d.ToXYZ()	# type: DB.XYZ
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToXYZ(Rhino.Geometry.Vector3d)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.XYZ revitXYZPoint = GeometryEncoder.ToXYZ(rhinoVector3d);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_xyzpoint = GE.ToXYZ(rhino_vector3d)	# type: DB.XYZ
             </code>
            
             </example>
             <param name="vector">Rhino vector to convert.</param>
             <returns>Revit point that is equivalent to the provided Rhino vector.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPlane(Rhino.Geometry.Plane)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Plane" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Plane" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPlane(Rhino.Geometry.Plane)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Plane revitPlane = rhinoPlane.ToPlane();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_plane = rhino_plane.ToPlane()	# type: DB.Plane
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPlane(Rhino.Geometry.Plane)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Plane revitPlane = GeometryEncoder.ToPlane(rhinoPlane);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_plane = GE.ToPlane(rhino_plane)	# type: DB.Plane
             </code>
            
             </example>
             <param name="plane">Rhino plane to convert.</param>
             <returns>Revit Plane that is equivalent to the provided Rhino plane.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToTransform(Rhino.Geometry.Transform)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Transform" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Transform" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToTransform(Rhino.Geometry.Transform)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Transform revitTransform = rhinoTransform.ToTransform();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_transform = rhino_transform.ToTransform()	# type: DB.Transform
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToTransform(Rhino.Geometry.Transform)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Transform revitTransform = GeometryEncoder.ToTransform(rhinoTransform);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_transform = GE.ToTransform(rhino_transform)	# type: DB.Transform
             </code>
            
             </example>
             <param name="transform">Rhino transform to convert.</param>
             <returns>Revit transfrom that is equivalent to the provided Rhino transform.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToBoundingBoxXYZ(Rhino.Geometry.BoundingBox)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.BoundingBox" /> to an equivalent <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToBoundingBoxXYZ(Rhino.Geometry.BoundingBox)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.BoundingBoxXYZ revitBBox = rhinoBBox.ToBoundingBoxXYZ();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_bbox = rhino_bbox.ToBoundingBoxXYZ()	# type: DB.BoundingBoxXYZ
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToBoundingBoxXYZ(Rhino.Geometry.BoundingBox)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.BoundingBoxXYZ revitBBox = GeometryEncoder.ToBoundingBoxXYZ(rhinoBBox);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_bbox = GE.ToBoundingBoxXYZ(rhino_bbox)	# type: DB.BoundingBoxXYZ
             </code>
             
             </example>
             <param name="boundingBox">Rhino bounding box to convert.</param>
             <returns>Revit bounding box that is equivalent to the provided Rhino bounding box.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToBoundingBoxXYZ(Rhino.Geometry.Box)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Box" /> to an equivalent <see cref="T:Autodesk.Revit.DB.BoundingBoxXYZ" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToBoundingBoxXYZ(Rhino.Geometry.Box)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.BoundingBoxXYZ revitBBox = rhinoBox.ToBoundingBoxXYZ();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_bbox = rhino_box.ToBoundingBoxXYZ()	# type: DB.BoundingBoxXYZ
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToBoundingBoxXYZ(Rhino.Geometry.Box)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.BoundingBoxXYZ revitBBox = GeometryEncoder.ToBoundingBoxXYZ(rhinoBox);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_bbox = GE.ToBoundingBoxXYZ(rhino_box)	# type: DB.BoundingBoxXYZ
             </code>
             
             </example>
             <param name="box">Rhino box to convert.</param>
             <returns>Revit bounding box that is equivalent to the provided Rhino box.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToOutline(Rhino.Geometry.BoundingBox)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.BoundingBox" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Outline" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToOutline(Rhino.Geometry.BoundingBox)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Outline revitOutline = rhinoBBox.ToOutline();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_outline = rhino_bbox.ToOutline()	# type: DB.Outline
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToOutline(Rhino.Geometry.BoundingBox)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Outline revitOutline = GeometryEncoder.ToOutline(rhinoBBox);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_outline = GE.ToOutline(rhino_bbox)	# type: DB.Outline
             </code>
             
             </example>
             <param name="boundingBox">Rhino bounding box to convert.</param>
             <returns>Revit outline that is equivalent to the provided Rhino bounding box.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToLine(Rhino.Geometry.Line)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Line" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Line" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToLine(Rhino.Geometry.Line)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Line revitLine = rhinoLine.ToLine();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_line = rhino_line.ToLine()	# type: DB.Line
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToLine(Rhino.Geometry.Line)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Line revitLine = GeometryEncoder.ToLine(rhinoLine);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_line = GE.ToLine(rhino_line)	# type: DB.Line
             </code>
             
             </example>
             <param name="line">Rhino line to convert.</param>
             <returns>Revit line that is equivalent to the provided Rhino line.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPolyLine(Rhino.Geometry.Polyline)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Polyline" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.PolyLine" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPolyLine(Rhino.Geometry.Polyline)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.PolyLine revitPolyLine = rhinoPolyLine.ToPolyLine();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_polyline = rhino_polyline.ToPolyLine()	# type: DB.PolyLine
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPolyLine(Rhino.Geometry.Polyline)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.PolyLine revitPolyLine = GeometryEncoder.ToPolyLine(rhinoPolyLine);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_polyline = GE.ToPolyLine(rhino_polyline)	# type: DB.PolyLine
             </code>
             
             </example>
             <param name="polyline">Rhino polyline to convert.</param>
             <returns>Revit polyline that is equivalent to the provided Rhino polyline.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToArc(Rhino.Geometry.Arc)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Arc" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Arc" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToArc(Rhino.Geometry.Arc)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Arc revitArc = rhinoArc.ToArc();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_arc = rhino_arc.ToArc()	# type: DB.Arc
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToArc(Rhino.Geometry.Arc)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Arc revitArc = GeometryEncoder.ToArc(rhinoArc);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_arc = GE.ToArc(rhino_arc)	# type: DB.Arc
             </code>
             
             </example>
             <param name="arc">Rhino arc to convert.</param>
             <returns>Revit arc that is equivalent to the provided Rhino arc.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToArc(Rhino.Geometry.Circle)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Circle" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Arc" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToArc(Rhino.Geometry.Circle)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Arc revitArc = rhinoCircle.ToArc();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_arc = rhino_circle.ToArc()	# type: DB.Arc
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToArc(Rhino.Geometry.Circle)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Arc revitArc = GeometryEncoder.ToArc(rhinoCircle);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_arc = GE.ToArc(rhino_circle)	# type: DB.Arc
             </code>
             
             </example>
             <param name="circle">Rhino circle to convert.</param>
             <returns>Revit arc that is equivalent to the provided Rhino circle.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Ellipse)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Ellipse" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Ellipse)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoEllipse.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_ellipse.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Ellipse)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoEllipse);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_ellipse)	# type: DB.Curve
             </code>
             
             </example>
             <param name="ellipse">Rhino ellipse to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino ellipse.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Ellipse,Rhino.Geometry.Interval)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Ellipse" /> within the given <see cref="T:Rhino.Geometry.Interval" />to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Ellipse,Rhino.Geometry.Interval)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             var interval = new Interval(0.0, 0.5);
             DB.Curve revitCurve = rhinoEllipse.ToCurve(interval);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             interval = Interval(0.0, 0.5);
             revit_curve = rhino_ellipse.ToCurve(interval)	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Ellipse,Rhino.Geometry.Interval)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             var interval = new Interval(0.0, 0.5);
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoEllipse, interval);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             interval = Interval(0.0, 0.5)
             revit_curve = GE.ToCurve(rhino_ellipse, interval)	# type: DB.Curve
             </code>
             
             </example>
             <param name="ellipse">Rhino ellipse to convert.</param>
             <param name="interval">Interval where the ellipse is defined.</param>
             <returns>Revit curve that is equivalent to the provided Rhino ellipse within the given interval</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPoint(Rhino.Geometry.Point)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Point" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Point" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPoint(Rhino.Geometry.Point)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Point revitPoint = rhinoPoint.ToPoint();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_point = rhino_point.ToPoint()	# type: DB.Point
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPoint(Rhino.Geometry.Point)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Point revitPoint = GeometryEncoder.ToPoint(rhinoPoint);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_point = GE.ToPoint(rhino_point)	# type: DB.Point
             </code>
             
             </example>
             <param name="point">Rhino point to convert.</param>
             <returns>Revit Point that is equivalent to the provided Rhino point.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToPoint(Rhino.Geometry.PointCloudItem)" -->
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.LineCurve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.LineCurve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.LineCurve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoLineCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_linecurve.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.LineCurve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoLineCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_linecurve)	# type: DB.Curve
             </code>
             
             </example>
             <param name="lineCurve">Rhino lineCurve to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino lineCurve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.PolylineCurve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.PolylineCurve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.PolylineCurve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoPolylineCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_polylinecurve.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.PolylineCurve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoPolylineCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_polylinecurve)	# type: DB.Curve
             </code>
             
             </example>
             <param name="polylineCurve">Rhino polylineCurve to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino polylineCurve.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.ArcCurve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.ArcCurve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.ArcCurve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoArcCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_arccurve.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.ArcCurve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoArcCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_arccurve)	# type: DB.Curve
             </code>
             
             </example>
             <param name="arcCurve">Rhino arcCurve to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino arcCurve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.NurbsCurve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.NurbsCurve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.NurbsCurve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoNurbsCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_nurbscurve.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.NurbsCurve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoNurbsCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_nurbscurve)	# type: DB.Curve
             </code>
             
             </example>
             <param name="nurbsCurve">Rhino nurbsCurve to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino nurbsCurve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.PolyCurve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.PolyCurve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.PolyCurve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoPolyCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_polycurve.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.PolyCurve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoPolyCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_polycurve)	# type: DB.Curve
             </code>
             
             </example>
             <param name="polyCurve">Rhino polyCurve to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino polyCurve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Curve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Curve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Curve" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Curve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = rhinoCurve.ToCurve();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curve = rhino_curve.ToCurve()	# type: DB.Curve
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurve(Rhino.Geometry.Curve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Curve revitCurve = GeometryEncoder.ToCurve(rhinoCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curve = GE.ToCurve(rhino_curve)	# type: DB.Curve
             </code>
             
             </example>
             <param name="curve">Rhino curve to convert.</param>
             <returns>Revit curve that is equivalent to the provided Rhino curve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurveLoop(Rhino.Geometry.Curve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Curve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.CurveLoop" /> containing consecutive segments of the input curve.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurveLoop(Rhino.Geometry.Curve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.CurveLoop revitCurveLoop = rhinoCurve.ToCurveLoop();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curveloop = rhino_curve.ToCurveLoop()	# type: DB.CurveLoop
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurveLoop(Rhino.Geometry.Curve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.CurveLoop revitCurveLoop = GeometryEncoder.ToCurveLoop(rhinoCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curveloop = GE.ToCurveLoop(rhino_curve)	# type: DB.CurveLoop
             </code>
             
             </example>
             <param name="curve">Rhino curve to convert.</param>
             <returns>Revit curveLoop that contains consecutive segments of provided Rhino curve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurveArray(Rhino.Geometry.Curve)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Curve" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.CurveArray" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurveArray(Rhino.Geometry.Curve)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.CurveArray revitCurveArray = rhinoCurve.ToCurveArray();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_curvearray = rhino_curve.ToCurveArray()	# type: DB.CurveArray
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToCurveArray(Rhino.Geometry.Curve)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.CurveArray revitCurveArray = GeometryEncoder.ToCurveArray(rhinoCurve);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_curvearray = GE.ToCurveArray(rhino_curve)	# type: DB.CurveArray
             </code>
             
             </example>
             <param name="curve">Rhino curve to convert.</param>
             <returns>Revit curveArray that contains consecutive segments of provided Rhino curve.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Brep)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Brep" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Solid" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Brep)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = rhinoBrep.ToSolid();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_solid = rhino_brep.ToSolid()	# type: DB.Solid
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Brep)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = GeometryEncoder.ToSolid(rhinoBrep);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_solid = GE.ToSolid(rhino_brep)	# type: DB.Solid
             </code>
             
             </example>
             <param name="brep">Rhino brep to convert.</param>
             <returns>Revit solid that is equivalent to the provided Rhino brep.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Extrusion)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Extrusion" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Solid" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Extrusion)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = rhinoExtrusion.ToSolid();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_solid = rhino_extrusion.ToSolid()	# type: DB.Solid
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Extrusion)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = GeometryEncoder.ToSolid(rhinoExtrusion);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_solid = GE.ToSolid(rhino_extrusion)	# type: DB.Solid
             </code>
             
             </example>
             <param name="extrusion">Rhino extrusion to convert.</param>
             <returns>Revit solid that is equivalent to the provided Rhino extrusion.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.SubD)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.SubD" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Solid" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.SubD)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = rhinoSubD.ToSolid();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_solid = rhino_subd.ToSolid()	# type: DB.Solid
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.SubD)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = GeometryEncoder.ToSolid(rhinoSubD);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_solid = GE.ToSolid(rhino_subd)	# type: DB.Solid
             </code>
             
             </example>
             <param name="subd">Rhino subd to convert.</param>
             <returns>Revit solid that is equivalent to the provided Rhino subd.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Mesh)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Mesh" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Solid" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Mesh)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = rhinoMesh.ToSolid();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_solid = rhino_mesh.ToSolid()	# type: DB.Solid
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToSolid(Rhino.Geometry.Mesh)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Solid revitSolid = GeometryEncoder.ToSolid(rhinoMesh);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_solid = GE.ToSolid(rhino_mesh)	# type: DB.Solid
             </code>
             
             </example>
             <param name="mesh">Rhino mesh to convert.</param>
             <returns>Revit solid that is equivalent to the provided Rhino mesh.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Brep)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Brep" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Mesh" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Brep)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = rhinoBrep.ToMesh();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_mesh = rhino_brep.ToMesh()	# type: DB.Mesh
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Brep)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = GeometryEncoder.ToMesh(rhinoBrep);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_mesh = GE.ToMesh(rhino_brep)	# type: DB.Mesh
             </code>
             
             </example>
             <param name="brep">Rhino brep to convert.</param>
             <returns>Revit mesh that is equivalent to the provided Rhino brep.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Extrusion)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Extrusion" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Mesh" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Extrusion)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = rhinoExtrusion.ToMesh();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_mesh = rhino_extrusion.ToMesh()	# type: DB.Mesh
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Extrusion)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = GeometryEncoder.ToMesh(rhinoExtrusion);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_mesh = GE.ToMesh(rhino_extrusion)	# type: DB.Mesh
             </code>
             
             </example>
             <param name="extrusion">Rhino extrusion to convert.</param>
             <returns>Revit mesh that is equivalent to the provided Rhino extrusion.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.SubD)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.SubD" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Mesh" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.SubD)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = rhinoSubD.ToMesh();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_mesh = rhino_subd.ToMesh()	# type: DB.Mesh
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.SubD)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = GeometryEncoder.ToMesh(rhinoSubD);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_mesh = GE.ToMesh(rhino_subd)	# type: DB.Mesh
             </code>
             
             </example>
             <param name="subd">Rhino subd to convert.</param>
             <returns>Revit mesh that is equivalent to the provided Rhino subd.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Mesh)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.Mesh" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.Mesh" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Mesh)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = rhinoMesh.ToMesh();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_mesh = rhino_mesh.ToMesh()	# type: DB.Mesh
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToMesh(Rhino.Geometry.Mesh)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.Mesh revitMesh = GeometryEncoder.ToMesh(rhinoMesh);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_mesh = GE.ToMesh(rhino_mesh)	# type: DB.Mesh
             </code>
             
             </example>
             <param name="mesh">Rhino mesh to convert.</param>
             <returns>Revit mesh that is equivalent to the provided Rhino mesh.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToGeometryObject(Rhino.Geometry.GeometryBase)">
             <summary>
             Converts the specified <see cref="T:Rhino.Geometry.GeometryBase" /> to an equivalent of <see cref="T:Autodesk.Revit.DB.GeometryObject" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToGeometryObject(Rhino.Geometry.GeometryBase)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.GeometryObject revitGeomObj = rhinoGeom.ToGeometryObject();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry
             clr.ImportExtensions(RhinoInside.Revit.Convert.Geometry)
            
             revit_geomobj = rhino_geom.ToGeometryObject()	# type: DB.GeometryObject
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Geometry.GeometryEncoder.ToGeometryObject(Rhino.Geometry.GeometryBase)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Geometry;
            
             DB.GeometryObject revitGeomObj = GeometryEncoder.ToGeometryObject(rhinoGeom);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Geometry.GeometryEncoder as GE
            
             revit_geomobj = GE.ToGeometryObject(rhino_geom)	# type: DB.GeometryObject
             </code>
             
             </example>
             <param name="geombase">Rhino geometryBase to convert.</param>
             <returns>Revit geometryObject that is equivalent to the provided Rhino geometryBase.</returns>
             <since>1.4</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.KnotListEncoder.CurveKnotEqualTo(System.Double,System.Double,System.Double,System.Boolean@)">
            <summary>
            Compares a curve knot <paramref name="value"/> with a <paramref name="successor"/> value,
            in a monotonic nondecreasing sequence, for equality.
            </summary>
            <param name="value"></param>
            <param name="successor"></param>
            <param name="tolerance"></param>
            <param name="strict">true in case <paramref name="value"/> and <paramref name="successor"/> are strictly equal, else false is returned.</param>
            <returns>true if <paramref name="value"/> and <paramref name="successor"/> are equal within <paramref name="tolerance"/>.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.KnotListEncoder.SurfaceKnotEqualTo(System.Double,System.Double,System.Double,System.Boolean@)">
            <summary>
            Compares a surface knot <paramref name="value"/> with a <paramref name="successor"/> value,
            in a monotonic nondecreasing sequence, for equality.
            </summary>
            <param name="value"></param>
            <param name="successor"></param>
            <param name="tolerance"></param>
            <param name="strict">true in case <paramref name="value"/> and <paramref name="successor"/> are strictly equal, else false is returned.</param>
            <returns>true if <paramref name="value"/> and <paramref name="successor"/> are equal within <paramref name="tolerance"/>.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.KnotListEncoder.KnotMultiplicity(Rhino.Geometry.Collections.NurbsCurveKnotList,System.Int32,System.Double,System.Double@,System.Boolean@)">
            <summary>
            Get knot multiplicity.
            </summary>
            <param name="knots"></param>
            <param name="index">Index of knot to query.</param>
            <param name="tolerance"></param>
            <param name="average"></param>
            <param name="strict"></param>
            <returns>The multiplicity (valence) of the knot.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.KnotListEncoder.KnotMultiplicity(Rhino.Geometry.Collections.NurbsSurfaceKnotList,System.Int32,System.Double,System.Double@,System.Boolean@)">
            <summary>
            Get knot multiplicity.
            </summary>
            <param name="knots"></param>
            <param name="index">Index of knot to query.</param>
            <param name="tolerance"></param>
            <param name="average"></param>
            <param name="strict"></param>
            <returns>The multiplicity (valence) of the knot.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.KnotListEncoder.MinDelta(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum delta in a monotonic nondecreasin sequence of System.Double values.
            </summary>
            <param name="knots"></param>
            <returns>The minimum delta in the sequence.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.KnotListEncoder.TryGetPolyCurveC2(Rhino.Geometry.NurbsCurve,Rhino.Geometry.PolyCurve@,System.Double)">
            <summary>
            Splits <paramref name="curve"/> as a <see cref="T:Rhino.Geometry.PolyCurve"/> where knot multiplicity is > degree - 2.
            </summary>
            <remarks>
            Collapses knots using <paramref name="knotTolerance"/>.
            </remarks>
            <param name="curve"></param>
            <param name="polyCurve"></param>
            <param name="knotTolerance"></param>
            <returns>false if no new polycurve is created.</returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.Raw.RawDecoder">
            <summary>
            Methods in this class convert Revit geometry to "Raw" form.
            <para>Raw form is Rhino geometry in Revit internal units</para>
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.Raw.RawEncoder">
            <summary>
            Methods in this class convert Revit geometry from "Raw" form.
            <para>The input geometry is granted not to be modified on any way, no copies are necessary before calling this methods.</para>
            <para>Raw form is Rhino geometry in Revit internal units</para>
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.MeshEncoder">
            <summary>
            Converts <see cref="T:Rhino.Geometry.Mesh"/> to be transfered to a <see cref="T:Autodesk.Revit.DB.Mesh"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.MeshEncoder.EncodeRaw(Rhino.Geometry.Mesh@,System.Double)">
            <summary>
            Scales <paramref name="mesh"/> by <paramref name="scaleFactor"/>,
            </summary>
            <param name="mesh"></param>
            <param name="scaleFactor"></param>
            <returns>false if <paramref name="mesh"/> is not valid or too small</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.MeshEncoder.ToMesh(Rhino.Geometry.Mesh,System.Double)">
            <summary>
            Replaces <see cref="M:RhinoInside.Revit.Convert.Geometry.Raw.RawEncoder.ToHost(Rhino.Geometry.Mesh)"/> to catch Revit Exceptions and handle Ngons
            </summary>
            <param name="mesh"></param>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.NurbsSplineEncoder">
            <summary>
            Converts <see cref="T:Rhino.Geometry.NurbsCurve"/> to be transfered to a <see cref="T:Autodesk.Revit.DB.NurbSpline"/>.
            <para>Non C2 curves are "Smoothed" when necessary.</para>
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.ShapeEncoder">
            <summary>
            This class is used to convert geometry to be stored in a <see cref="T:Autodesk.Revit.DB.DirectShape"/>.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.SolidDecoder">
            <summary>
            This class is obsolete but is here as reference of a possible alternative SolidDecoder
            <para><see cref="M:RhinoInside.Revit.Convert.Geometry.Raw.RawDecoder.ToRhino(Autodesk.Revit.DB.Solid)"/> seems to be robust enough to make this class obsolete</para>
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.BrepEncoder">
            <summary>
            Converts a "complex" <see cref="T:Rhino.Geometry.Brep"/> to be transfered to a <see cref="T:Autodesk.Revit.DB.Solid"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.BrepEncoder.ToSolid(Rhino.Geometry.Brep)">
            <summary>
            Replaces <see cref="M:RhinoInside.Revit.Convert.Geometry.Raw.RawEncoder.ToHost(Rhino.Geometry.Brep)"/> to catch Revit Exceptions
            </summary>
            <param name="brep"></param>
            <returns></returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.SubDEncoder">
            <summary>
            Converts <see cref="T:Rhino.Geometry.SubD"/> to be transfered to a <see cref="T:Autodesk.Revit.DB.Solid"/>.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.UnitConverter">
            <summary>
            Represents a converter for converting measurable values back and forth
            the Revit internal unit system and a external Rhino unit system.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.UnitConverter.Identity">
            <summary>
            Identity <see cref="T:RhinoInside.Revit.Convert.Geometry.UnitConverter"/>.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.UnitConverter.Model">
            <summary>
            Default <see cref="T:RhinoInside.Revit.Convert.Geometry.UnitConverter"/> for converting to and from Rhino model unit system.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.UnitConverter.Page">
            <summary>
            Default <see cref="T:RhinoInside.Revit.Convert.Geometry.UnitConverter"/> for converting to and from Rhino page unit system.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.UnitConverter.InternalUnitScale">
            <summary>
            Revit Internal Unit Scale.
            </summary>
            <remarks>
            It returns <see cref="F:RhinoInside.Revit.Convert.Units.UnitScale.Feet"/>.
            </remarks>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.UnitConverter.NoScale">
            <summary>
            Factor to do a direct conversion without any unit scaling.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.UnitConverter.ToModelLength">
            <summary>
            Factor for converting a length from Revit internal units to active Rhino document units.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.UnitConverter.ToInternalLength">
            <summary>
            Factor for converting a length from active Rhino document units to Revit internal units.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.ConvertFromInternalUnits(System.Double,RhinoInside.Revit.Convert.Units.UnitScale)">
            <summary>
            Converts a value from Host's internal unit system to <paramref name="target"/> units system.
            </summary>
            <param name="length">Length value to convert</param>
            <param name="target">The unit system to convert to.</param>
            <returns>Returns <paramref name="length"/> expressed in <paramref name="target"/> unit system.</returns>
            <remarks>
            This method may return <see cref="F:System.Double.NaN"/> if the conversion is not defined.
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.ConvertToInternalUnits(System.Double,RhinoInside.Revit.Convert.Units.UnitScale)">
            <summary>
            Converts a value from <paramref name="source"/> unit system to Host's internal unit system.
            </summary>
            <param name="length">Length value to convert</param>
            <param name="source">The unit system to convert from.</param>
            <returns>Returns <paramref name="length"/> expressed in Revit internal unit system.</returns>
            <remarks>
            This method may return <see cref="F:System.Double.NaN"/> if the conversion is not defined.
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.Convert(System.Double,RhinoInside.Revit.Convert.Units.UnitScale,RhinoInside.Revit.Convert.Units.UnitScale,System.Int32)">
            <summary>
            Converts <paramref name="value"/> from <paramref name="source"/> units to <paramref name="target"/> units.
            </summary>
            <param name="value"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="dimensionality"> 0 = factor, 1 = length, 2 = area, 3 = volumen </param>
            <returns>Returns <paramref name="value"/> expressed in <paramref name="target"/> unit system.</returns>
            <remarks>
            This method may return <see cref="F:System.Double.NaN"/> if the conversion is not defined.
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.#ctor(RhinoInside.Revit.Convert.Units.UnitScale)">
            <summary>
            Initializes a new instance of the <see cref="T:RhinoInside.Revit.Convert.Geometry.UnitConverter"/> class to the indicated unit system.
            </summary>
            <param name="scale">A Rhino unit system to be used in conversions.</param>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.#ctor(Rhino.DocObjects.ActiveSpace,Rhino.RhinoDoc)">
            <summary>
            Initializes a new instance of the <see cref="T:RhinoInside.Revit.Convert.Geometry.UnitConverter"/> class referencing the indicated Rhino document.
            </summary>
            <param name="space">A Rhino space to take unit system from.</param>
            <param name="rhinoDoc">A Rhino document to be used in conversions, null to reference <see cref="P:Rhino.RhinoDoc.ActiveDoc"/>.</param>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.UnitConverter.UnitScale">
            <summary>
            External unit system used to convert.
            </summary>
            <remarks>
            <para>This external unit system use to be the active Rhino document model or page units.</para>
            <para>The internal unit system is always the Revit unit system for lengths (feet).</para>
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.ConvertFromInternalUnits(System.Double)">
            <summary>
            Converts a length from internal to external unit system.
            </summary>
            <param name="length">Length value to convert</param>
            <returns>Returns <paramref name="length"/> expressed in converter external unit system.</returns>
            <remarks>
            This method may return <see cref="F:System.Double.NaN"/> if the conversion is not defined.
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConverter.ConvertToInternalUnits(System.Double)">
            <summary>
            Converts a length from external to internal unit system.
            </summary>
            <param name="length">Length value to convert</param>
            <returns>Returns <paramref name="length"/> expressed in Revit internal unit system.</returns>
            <remarks>
            This method may return <see cref="F:System.Double.NaN"/> if the conversion is not defined.
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.Scale``1(``0,System.Double)">
            <summary>
            Scales <paramref name="value"/> instance by <paramref name="factor"/> in place.
            </summary>
            <param name="value"></param>
            <param name="factor"></param>
            <seealso cref="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.InOtherUnits``1(``0,System.Double)"/>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.InOtherUnits``1(``0,System.Double)">
            <summary>
            Duplicates and scales <paramref name="value"/> to be stored in other units.
            <para>See <see cref="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.Scale``1(``0,System.Double)"/> for in place scaling.</para>
            </summary>
            <param name="value"></param>
            <param name="factor"></param>
            <returns>Returns a scaled duplicate of the input <paramref name="value"/> in other units.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.InRhinoUnits``1(``0)">
            <summary>
            Duplicates and scales <paramref name="value"/> to be stored in Acitve Rhino document units.
            <para>See <see cref="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.Scale``1(``0,System.Double)"/> for in place scaling.</para>
            </summary>
            <param name="value"></param>
            <returns>Returns a scaled duplicate of the input <paramref name="value"/> in Active Rhino document units.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.InHostUnits``1(``0)">
            <summary>
            Duplicates and scales <paramref name="value"/> to be stored Revit internal units.
            <para>See <see cref="M:RhinoInside.Revit.Convert.Geometry.UnitConvertible.Scale``1(``0,System.Double)"/> for in place scaling.</para>
            </summary>
            <param name="value"></param>
            <returns>Returns a duplicate of <paramref name="value"/> in Revit internal units.</returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance">
            <summary>
            Tolerance values to be used on <see cref="T:Autodesk.Revit.DB.GeometryObject"/> instances.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.#ctor(RhinoInside.Revit.Convert.Units.UnitScale)">
            <summary>
            Initializes a new instance of the <see cref="T:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance"/> using to the indicated unit system.
            </summary>
            <param name="scale">A <see cref="T:Rhino.UnitSystem"/> to be used in conversions.</param>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.AngleTolerance">
            <summary>
            Angle tolerance.
            </summary>
            <remarks>
            Value is in radians. Two angle measurements closer than this value are considered identical.
            </remarks>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.VertexTolerance">
            <summary>
            Vertex tolerance.
            </summary>
            <remarks>
            Two points within this distance are considered coincident.
            </remarks>
        </member>
        <member name="F:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.ShortCurveTolerance">
            <summary>
            Curve length tolerance
            </summary>
            <remarks>
            A curve shorter than this distance is considered degenerated.
            </remarks>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.Internal">
            <summary>
            Default <see cref="T:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance"/> to be used on <see cref="T:Autodesk.Revit.DB.GeometryObject"/> instances.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.Model">
            <summary>
            Default <see cref="T:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance"/> expresed in Rhino model unit system.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance.Page">
            <summary>
            Default <see cref="T:RhinoInside.Revit.Convert.Geometry.GeometryObjectTolerance"/> expresed in Rhino page unit system.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Geometry.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in <see cref="N:Rhino.Geometry"/> namespace.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Render.RenderMaterialConverter">
            <summary>
            Represents a converter for converting <see cref="T:Rhino.Render.RenderMaterial"/> values
            back and forth Revit and Rhino.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Render.RenderMaterialConverter.ToRenderMaterial(Autodesk.Revit.DB.Material,Rhino.RhinoDoc)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Material" /> to an equivalent <see cref="T:Rhino.Render.RenderMaterial" /> in given <see cref="T:Rhino.RhinoDoc" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Render.RenderMaterialConverter.ToRenderMaterial(Autodesk.Revit.DB.Material,Rhino.RhinoDoc)" /> as extension method:
            
             <code language="csharp">
             using Rhino;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Render;
            
             RhinoDoc doc = Rhino.RhinoDoc.ActiveDoc;
             RenderMaterial rhinoMaterial = revitMaterial.ToRenderMaterial(doc);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from Rhino.Render import RenderMaterial
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Render
             clr.ImportExtensions(RhinoInside.Revit.Convert.Render)
             
             rhino_material = revit_material.ToRenderMaterial()	# type: RenderMaterial
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Render.RenderMaterialConverter.ToRenderMaterial(Autodesk.Revit.DB.Material,Rhino.RhinoDoc)" /> as static method:
            
             <code language="csharp">
             using Rhino;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Render;
            
             RhinoDoc doc = Rhino.RhinoDoc.ActiveDoc;
             RenderMaterial rhinoMaterial = RenderMaterialConverter.ToRenderMaterial(revitMaterial, doc);
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("RhinoCommon")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from Rhino import RhinoDoc
             from Rhino.Render import RenderMaterial
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Render.RenderMaterialConverter as RMC
            
             doc = RhinoDoc.ActiveDoc	# type: RhinoDoc
             rhino_material = RMC.ToRenderMaterial(revit_material, doc)	# type: RenderMaterial
             </code>
            
             </example>
             <param name="material">Revit material to convert.</param>
             <param name="rhinoDoc">Rhino document to associate the resulting material with.</param>
             <returns>Rhino renderMaterial that is equivalent to the provided Revit material.</returns>
             <since>1.3</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Render.RenderMaterialConverter.ToSimulatedTexture(Autodesk.Revit.DB.Visual.Asset)">
            <summary>
            Extracts Parameters from a <see cref="T:Autodesk.Revit.DB.Visual.UnifiedBitmap"/> Asset to a <see cref="T:Rhino.Render.SimulatedTexture"/>
            </summary>
            <param name="asset"></param>
            <returns>A <see cref="T:Rhino.Render.SimulatedTexture"/> with the input <paramref name="asset"/> parameters.</returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Render.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in <see cref="N:Rhino.Render"/> namespace.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter">
            <summary>
            Converter to convert <see cref="T:Eto.Drawing.Color"/> values to and from <see cref="T:Autodesk.Revit.DB.Color"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter.ToColor(Autodesk.Revit.DB.Color)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Color" /> to an equivalent <see cref="T:Eto.Drawing.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter.ToColor(Autodesk.Revit.DB.Color)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Eto.Drawing;
             
             Color etoColor = revitColor.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("Eto")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from Eto.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Eto.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.Eto.Drawing)
             
             eto_color = revit_color.ToColor()	# type: Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter.ToColor(Autodesk.Revit.DB.Color)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Eto.Drawing;
             
             Color etoColor = ColorConverter.ToColor(revitColor)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("Eto")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from Eto.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter as CC
             
             eto_color = CC.ToColor(revit_color)	# type: Color
             </code>
            
             </example>
             <param name="color">Revit color to convert.</param>
             <returns>An Eto color that is equivalent to the provided Revit color.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter.ToColor(Eto.Drawing.Color)">
             <summary>
             Converts the specified <see cref="T:Eto.Drawing.Color" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter.ToColor(Eto.Drawing.Color)" /> as extension method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Eto.Drawing;
             
             DB.Color revitColor = etoColor.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("Eto")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from Eto.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Eto.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.Eto.Drawing)
             
             revit_color = eto_color.ToColor()	# type: DB.Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter.ToColor(Eto.Drawing.Color)" /> as static method:
            
             <code language="csharp">
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.Eto.Drawing;
             
             DB.Color revitColor = ColorConverter.ToColor(etoColor)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("Eto")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from Eto.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.Eto.Drawing.ColorConverter as CC
             
             revit_color = CC.ToColor(eto_color)	# type: DB.Color
             </code>
            
             </example>
             <param name="color">Eto color to convert.</param>
             <returns>A Revit color that is equivalent to the provided Eto color.</returns>
             <since>1.0</since>
        </member>
        <member name="T:RhinoInside.Revit.Convert.Eto.Drawing.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in <see cref="N:Eto.Drawing"/> namespace.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Collections.Generic.ArrayConverter.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts an array of one type to an array of another type.
            </summary>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="input">The one-dimensional, zero-based <see cref="T:System.Array"/> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2"/> that converts each element from one type to another type.</param>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Collections.Generic.IListConverter.ConvertAll``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1})">
            <summary>
            Converts an IList of one type to an IList of another type.
            </summary>
            <typeparam name="TInput">The type of the elements of the source IList.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="input">The <see cref="T:System.Collections.Generic.IList`1"/> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2"/> that converts each element from one type to another type.</param>
            <returns>An Array of the target type containing the converted elements from the source IList.</returns>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Collections.Generic.ICollectionConverter.ConvertAll``2(System.Collections.Generic.ICollection{``0},System.Converter{``0,``1})">
            <summary>
            Converts an ICollection of one type to a List of another type.
            </summary>
            <typeparam name="TInput">The type of the elements of the source ICollection.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="input">The <see cref="T:System.Collections.Generic.ICollection`1"/> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2"/> that converts each element from one type to another type.</param>
            <returns>An array of the target type containing the converted elements from the source ICollection.</returns>
        </member>
        <member name="T:RhinoInside.Revit.Convert.System.Drawing.ColorConverter">
            <summary>
            Converter to convert <see cref="T:System.Drawing.Color"/> values to and from <see cref="T:Autodesk.Revit.DB.Color"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Drawing.ColorConverter.ToColor(Autodesk.Revit.DB.Color)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Color" /> to an equivalent <see cref="T:System.Drawing.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorConverter.ToColor(Autodesk.Revit.DB.Color)" /> as extension method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             Color color = revitColor.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Drawing)
             
             color = revit_color.ToColor()	# type: Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorConverter.ToColor(Autodesk.Revit.DB.Color)" /> as static method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             Color color = ColorConverter.ToColor(revitColor)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing.ColorConverter as CC
             
             color = CC.ToColor(revit_color)	# type: Color
             </code>
            
             </example>
             <param name="color">Revit color to convert.</param>
             <returns>System color that is equivalent to the provided Revit color.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Drawing.ColorConverter.ToColor(System.Drawing.Color)">
             <summary>
             Converts the specified <see cref="T:System.Drawing.Color" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorConverter.ToColor(System.Drawing.Color)" /> as extension method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             DB.Color revitColor = color.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Drawing)
             
             revit_color = color.ToColor()	# type: DB.Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorConverter.ToColor(System.Drawing.Color)" /> as static method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             DB.Color revitColor = ColorConverter.ToColor(color)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing.ColorConverter as CC
             
             revit_color = CC.ToColor(color)	# type: DB.Color
             </code>
            
             </example>
             <param name="color">System color to convert.</param>
             <returns>Revit color that is equivalent to the provided System color.</returns>
             <since>1.0</since>
        </member>
        <member name="T:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter">
            <summary>
            Converter to convert <see cref="T:System.Drawing.Color"/> values to and from <see cref="T:Autodesk.Revit.DB.ColorWithTransparency"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter.ToColor(Autodesk.Revit.DB.ColorWithTransparency)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Color" /> to an equivalent <see cref="T:System.Drawing.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter.ToColor(Autodesk.Revit.DB.ColorWithTransparency)" /> as extension method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             Color color = revitColor.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Drawing)
             
             color = revit_color.ToColor()	# type: Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter.ToColor(Autodesk.Revit.DB.ColorWithTransparency)" /> as static method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             Color color = ColorWithTransparencyConverter.ToColor(revitColor)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter as CC
             
             color = CC.ToColor(revit_color)	# type: Color
             </code>
            
             </example>
             <param name="color">Revit color to convert.</param>
             <returns>System color that is equivalent to the provided Revit color.</returns>
             <since>1.1</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter.ToColorWithTransparency(System.Drawing.Color)">
             <summary>
             Converts the specified <see cref="T:System.Drawing.Color" /> to an equivalent <see cref="T:Autodesk.Revit.DB.ColorWithTransparency" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter.ToColorWithTransparency(System.Drawing.Color)" /> as extension method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             DB.ColorWithTransparency revitColor = color.ToColorWithTransparency();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Drawing)
             
             revit_color = color.ToColor()	# type: DB.ColorWithTransparency
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.ColorWithTransparencyConverter.ToColorWithTransparency(System.Drawing.Color)" /> as static method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             DB.ColorWithTransparency revitColor = ColorConverter.ToColorWithTransparency(color)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Drawing import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing.ColorConverter as CC
             
             revit_color = CC.ToColorWithTransparency(color)	# type: DB.ColorWithTransparency
             </code>
            
             </example>
             <param name="color">System color to convert.</param>
             <returns>Revit color that is equivalent to the provided System color.</returns>
             <since>1.1</since>
        </member>
        <member name="T:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter">
            <summary>
            Converter to convert <see cref="T:System.Drawing.Rectangle"/> values to and from <see cref="T:Autodesk.Revit.DB.Rectangle"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter.ToRectangle(Autodesk.Revit.DB.Rectangle)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Rectangle" /> to an equivalent <see cref="T:System.Drawing.Rectangle" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter.ToRectangle(Autodesk.Revit.DB.Rectangle)" /> as extension method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             Rectangle rectangle = revitRectangle.ToRectangle();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Drawing import Rectangle
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Drawing)
             
             rectangle = revit_rectangle.ToRectangle()	# type: Rectangle
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter.ToRectangle(Autodesk.Revit.DB.Rectangle)" /> as static method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             Rectangle rectangle = RectangleConverter.ToRectangle(revitRectangle)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Drawing import Rectangle
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing.RectangleConverter as RC
             
             rectangle = RC.ToRectangle(revit_rectangle)	# type: Rectangle
             </code>
            
             </example>
             <param name="rectangle">System rectangle to convert.</param>
             <returns>Revit rectangle that is equivalent to the provided System rectangle.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter.ToRectangle(System.Drawing.Rectangle)">
             <summary>
             Converts the specified <see cref="T:System.Drawing.Rectangle" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Rectangle" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter.ToRectangle(System.Drawing.Rectangle)" /> as extension method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             DB.Rectangle revitRectangle = rectangle.ToRectangle();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Drawing import Rectangle
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Drawing)
             
             revit_rectangle = rectangle.ToRectangle()	# type: DB.Rectangle
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Drawing.RectangleConverter.ToRectangle(System.Drawing.Rectangle)" /> as static method:
            
             <code language="csharp">
             using System.Drawing;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Drawing;
             
             DB.Rectangle revitRectangle = RectangleConverter.ToRectangle(rectangle)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Drawing")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Drawing import Rectangle
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Drawing.RectangleConverter as RC
             
             revit_rectangle = RC.ToRectangle(rectangle)	# type: DB.Rectangle
             </code>
            
             </example>
             <param name="rectangle">System rectangle to convert.</param>
             <returns>Revit rectangle that is equivalent to the provided System rectangle.</returns>
             <since>1.0</since>
        </member>
        <member name="T:RhinoInside.Revit.Convert.System.Drawing.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in <see cref="N:System.Drawing"/> namespace.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter">
            <summary>
            Converter to convert <see cref="T:System.Windows.Media.Color"/> values to and from <see cref="T:Autodesk.Revit.DB.Color"/>.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter.ToColor(Autodesk.Revit.DB.Color)">
             <summary>
             Converts the specified <see cref="T:Autodesk.Revit.DB.Color" /> to an equivalent <see cref="T:System.Windows.Media.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter.ToColor(Autodesk.Revit.DB.Color)" /> as extension method:
            
             <code language="csharp">
             using System.Windows.Media;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Windows.Media;
             
             Color color = revitColor.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Windows")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Windows.Media import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Windows.Media
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Windows.Media)
             
             color = revit_color.ToColor()	# type: Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter.ToColor(Autodesk.Revit.DB.Color)" /> as static method:
            
             <code language="csharp">
             using System.Windows.Media;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Windows.Media;
             
             Color color = ColorConverter.ToColor(revitColor)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Windows")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Windows.Media import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter as CC
             
             color = CC.ToColor(revit_color)	# type: Color
             </code>
            
             </example>
             <param name="color">Revit color to convert.</param>
             <returns>System color that is equivalent to the provided Revit color.</returns>
             <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter.ToColor(System.Windows.Media.Color)">
             <summary>
             Converts the specified <see cref="T:System.Windows.Media.Color" /> to an equivalent <see cref="T:Autodesk.Revit.DB.Color" />.
             </summary>
             <example>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter.ToColor(System.Windows.Media.Color)" /> as extension method:
            
             <code language="csharp">
             using System.Windows.Media;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Windows.Media;
             
             DB.Color revitColor = color.ToColor();
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Windows")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             from System.Windows.Media import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Windows.Media
             clr.ImportExtensions(RhinoInside.Revit.Convert.System.Windows.Media)
             
             revit_color = color.ToColor()	# type: DB.Color
             </code>
             
             Using <see cref="M:RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter.ToColor(System.Windows.Media.Color)" /> as static method:
            
             <code language="csharp">
             using System.Windows.Media;
             using DB = Autodesk.Revit.DB;
             using RhinoInside.Revit.Convert.System.Windows.Media;
             
             DB.Color revitColor = ColorConverter.ToColor(color)
             </code>
             
             <code language="Python">
             import clr
             clr.AddReference("System.Windows")
             clr.AddReference("RevitAPI")
             clr.AddReference("RhinoInside.Revit")
             clr.AddReference("Eto")
             from System.Windows.Media import Color
             import Autodesk.Revit.DB as DB
             import RhinoInside.Revit.Convert.System.Windows.Media.ColorConverter as CC
             
             revit_color = CC.ToColor(color)	# type: DB.Color
             </code>
            
             </example>
             <param name="color">System color to convert.</param>
             <returns>Revit color that is equivalent to the provided System color.</returns>
             <since>1.0</since>
        </member>
        <member name="T:RhinoInside.Revit.Convert.System.Windows.Media.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in <see cref="N:System.Windows.Media"/> namespace.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Convert.NamespaceDoc">
            <summary>
            Provides access to various types used to convert back and forth values defined in Rhino API.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.Core.ExpirationPeriod">
            <summary>
            Expiration period in days. 0 means never expire.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.GH.ElementTracking.TrackingMode.NotApplicable">
            <summary>
            Tracking is not applicable on this object.
            </summary>
        </member>
        <member name="F:RhinoInside.Revit.GH.ElementTracking.TrackingMode.Disabled">
            <summary>
            A brand new element should be created on each solution.
            Elements created on previous iterations are ignored.
            </summary>
            <remarks>
            No element tracking takes part in this mode, each run appends a new element.
            The operation may fail if an element with same name already exists.
            </remarks>
        </member>
        <member name="F:RhinoInside.Revit.GH.ElementTracking.TrackingMode.Supersede">
            <summary>
            A brand new element should be created for each solution.
            Elements created on previous iterations are deleted.
            </summary>
            <remarks>
            If an element with the same name already exists it will be replaced by the new one.
            </remarks>
        </member>
        <member name="F:RhinoInside.Revit.GH.ElementTracking.TrackingMode.Reconstruct">
            <summary>
            An existing element should be reconstructed from the input values if it exists;
            otherwise, a new one should be created.
            </summary>
            <remarks>
            The operation may fail if an element with this name already exists.
            </remarks>
        </member>
        <member name="P:RhinoInside.Revit.GH.ElementTracking.IGH_TrackingComponent.TrackingMode">
            <summary>
            Current tracking mode.
            </summary>
            <remarks>
            Default value is <see cref="F:RhinoInside.Revit.GH.ElementTracking.TrackingMode.NotApplicable"/>.
            </remarks>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.IsEditorLoaded">
            <summary>
            Returns the loaded state of the Grasshopper Main window.
            </summary>
            <returns>True if the Main Grasshopper Window has been loaded.</returns>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.LoadEditor">
            <summary>
            Load the main Grasshopper Editor. If the editor has already been loaded nothing
            will happen.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.IsEditorVisible">
            <summary>
            Returns the visible state of the Grasshopper Main window.
            </summary>
            <returns>True if the Main Grasshopper Window has been loaded and is visible.</returns>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.ShowEditor">
            <summary>
            Show the main Grasshopper Editor. The editor will be loaded first if needed.
            If the Editor is already on screen, it will be activated.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.ShowEditorAsync">
            <summary>
            Show Grasshopper window asynchronously
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.HideEditor">
            <summary>
            Hide the main Grasshopper Editor. If the editor hasn't been loaded or if the
            Editor is already hidden, nothing will happen.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.OpenDocument(System.String)">
            <summary>
            Open a Grasshopper document. The editor will be loaded if necessary, but it will not be automatically shown.
            </summary>
            <param name="filename">Path of file to open (must be a *.gh or *.ghx extension).</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.OpenDocumentAsync(System.String,System.Boolean)">
            <summary>
            Open a Grasshopper document. The editor will be loaded and shown if necessary.
            </summary>
            <param name="filename">Full path to GH definition file</param>
            <param name="showEditor">True to force the Main Grasshopper Window visible.</param>
        </member>
        <member name="M:RhinoInside.Revit.GH.Guest.ActiveCanvas_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Adds Shift+Del sortcut to Delete command
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:RhinoInside.Revit.GH.Kernel.IGH_ElementIdParam">
            <summary>
            Base interface for all Parameter types in RhinoInside.Revit.GH that reference Revit elements.
            </summary>
            <remarks>
            Do not implement this interface from scratch, derive from <see cref="!:RhinoInside.Revit.GH.Types.ElementIdParam"/> instead.
            </remarks>
            <seealso cref="!:RhinoInside.Revit.GH.Types.ElementIdParam"/>
        </member>
        <member name="T:RhinoInside.Revit.GH.Kernel.IGH_ElementIdComponent">
            <summary>
            Base interface for all Component types in RhinoInside.Revit.GH that reference Revit elements.
            </summary>
            <remarks>
            Do not implement this interface from scratch, derive from <see cref="!:RhinoInside.Revit.GH.Components.Component"/> instead.
            </remarks>
            <seealso cref="!:RhinoInside.Revit.GH.Components.Component"/>
        </member>
        <member name="T:RhinoInside.Revit.NamespaceDoc">
            <summary>
            Provides access to Rhino and Revit functionality when running Rhino as a Revit AddIn.
            </summary>
        </member>
        <member name="T:RhinoInside.Revit.Rhinoceros">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for accessing Rhinoceros API from Rhino.Inside.
            </summary>
        </member>
        <member name="M:RhinoInside.Revit.Rhinoceros.InvokeInHostContext(System.Action)">
            <summary>
            Executes the specified delegate on Revit UI context.
            </summary>
            <param name="action">A delegate that contains a method to be called in Revit API context.</param>
            <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.Rhinoceros.InvokeInHostContext``1(System.Func{``0})">
            <summary>
            Executes the specified delegate on Revit UI context.
            </summary>
            <typeparam name="T">The return type of the <paramref name="func"/>.</typeparam>
            <param name="func">A delegate that contains a method to be called in Revit API context.</param>
            <returns>The return value from the function being invoked.</returns>
            <since>1.0</since>
        </member>
        <member name="M:RhinoInside.Revit.DirectContext3DServer.AlphaToTransparency(System.Byte)">
            <summary>
            Convert Alpha value into a Transparency value
            </summary>
            <remarks>Since we are drawing in TransparentPass seems no pixel should be opaque</remarks>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="T:RhinoInside.Revit.Revit">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for accessing Revit API from Rhino.Inside.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Revit.ActiveUIApplication">
            <summary>
            Gets the active <see cref="T:Autodesk.Revit.UI.UIApplication"/> in the current UI session.
            </summary>
            <remarks>
            Provides access to windows, documents, events used at UI level.
            </remarks>
            <since>1.0</since>
        </member>
        <member name="P:RhinoInside.Revit.Revit.ActiveDBApplication">
            <summary>
            Gets the active <see cref="T:Autodesk.Revit.ApplicationServices.Application"/> in the current DB session.
            </summary>
            <remarks>
            Provides access to tolerances, documents, events used at databse level.
            </remarks>
            <since>1.0</since>
        </member>
        <member name="P:RhinoInside.Revit.Revit.ActiveUIDocument">
            <summary>
            Gets the active <see cref="T:Autodesk.Revit.UI.UIDocument"/> in the Revit UI.
            </summary>
            <since>1.0</since>
        </member>
        <member name="P:RhinoInside.Revit.Revit.ActiveDBDocument">
            <summary>
            Gets the active <see cref="T:Autodesk.Revit.DB.Document"/> in the Revit UI.
            </summary>
            <since>1.0</since>
        </member>
        <member name="T:RhinoInside.Revit.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RhinoInside.Revit.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
