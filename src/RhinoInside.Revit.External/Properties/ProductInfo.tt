<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#
ushort Major = 0;
ushort Minor = 0;
ushort Build = 0;
ushort Revision = 0;
string Release = "";
string Metadata = "";

var product = ProductInfo.LoadFrom(this.Host.ResolvePath("../../Product.targets"));
{
  Major = product.MajorVersion;
  Minor = product.MinorVersion;
  if (!string.IsNullOrWhiteSpace(product.ReleaseVersion))
    Release = $"-{product.ReleaseVersion}";
  if (!string.IsNullOrWhiteSpace(product.MetaVersion))
    Metadata = $"+{product.MetaVersion}";

  var buildDate = Environment.GetEnvironmentVariable("BuildDate");
  var now = !string.IsNullOrWhiteSpace(buildDate) ? DateTime.Parse(buildDate) :
            DateTime.Now;
  var days = now.Date - new DateTime(2000, 1, 1);

  Build = product.BuildVersion.HasValue ? product.BuildVersion.Value :
          Math.Min(ushort.MaxValue, (ushort)days.TotalDays);

  Revision = product.RevisionVersion.HasValue ? product.RevisionVersion.Value :
             (ushort)(now.TimeOfDay.TotalSeconds / 2);
}
#>
using System.Reflection;

[assembly: AssemblyCompany("<#= product.Company #>")]
[assembly: AssemblyProduct("<#= product.Name #>")]
[assembly: AssemblyCopyright("Â© <#= product.Copyright #>")]
[assembly: AssemblyTrademark("<#= product.Trademark #>")]
[assembly: AssemblyVersion("<#= Major #>.<#= Minor #>.<#= Build #>.<#= Revision #>")]
[assembly: AssemblyFileVersion("<#= Major #>.<#= Minor #>.<#= Build #>.<#= Revision #>")]
[assembly: AssemblyInformationalVersion("<#= Major #>.<#= Minor #>.<#= Build #><#= Release #><#= Metadata #>")]

<#+
public class ProductInfo
{
  public string Name = "";
  public string Company= "";
  public string Copyright= "";
  public string Trademark = "";
  public string ReleaseVersion = "";
  public string MetaVersion = "";
  public ushort MajorVersion = 0;
  public ushort MinorVersion = 0;
  public ushort? BuildVersion;
  public ushort? RevisionVersion;

  [Serializable()]
  public class PropertyGroup
  {
    public string ProductName;
    public string ProductCompany;
    public string ProductCopyright;
    public string ProductTrademark;
    public string ProductReleaseVersion;
    public string ProductMetaVersion;
    public ushort? ProductMajorVersion;
    public ushort? ProductMinorVersion;
    public ushort? ProductBuildVersion;
    public ushort? ProductRevisionVersion;
  }

  [Serializable(), XmlRoot("Project", Namespace = "http://schemas.microsoft.com/developer/msbuild/2003")]
  public class Project : List<PropertyGroup> { }

  public static ProductInfo LoadFrom(string filePath)
  {
    var productInfo = new ProductInfo();
    using (var reader = new StreamReader(filePath))
    {
      var serializer = new XmlSerializer(typeof(Project));
      {
        foreach (var propertyGroup in serializer.Deserialize(reader) as Project)
        {
          if (propertyGroup.ProductName is object) productInfo.Name = propertyGroup.ProductName;
          if (propertyGroup.ProductCompany is object) productInfo.Company = propertyGroup.ProductCompany;
          if (propertyGroup.ProductCopyright is object) productInfo.Copyright = propertyGroup.ProductCopyright;
          if (propertyGroup.ProductTrademark is object) productInfo.Trademark = propertyGroup.ProductTrademark;
          if (propertyGroup.ProductReleaseVersion is object) productInfo.ReleaseVersion = propertyGroup.ProductReleaseVersion;
          if (propertyGroup.ProductMetaVersion is object) productInfo.MetaVersion = propertyGroup.ProductMetaVersion;
          if (propertyGroup.ProductMajorVersion is object) productInfo.MajorVersion = propertyGroup.ProductMajorVersion.Value;
          if (propertyGroup.ProductMinorVersion is object) productInfo.MinorVersion = propertyGroup.ProductMinorVersion.Value;
          if (propertyGroup.ProductBuildVersion is object) productInfo.BuildVersion = propertyGroup.ProductBuildVersion.Value;
          if (propertyGroup.ProductRevisionVersion is object) productInfo.RevisionVersion = propertyGroup.ProductRevisionVersion.Value;
        }
      }
    }

    return productInfo;
  }
}
#>